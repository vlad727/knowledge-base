apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: my-app-set
spec:
  generators:
    # Ваш генератор, например, git или list
  template:
    metadata:
      name: '{{name}}'
    spec:
      project: default
      source:
        repoURL: 'https://github.com/my-repo.git'
        targetRevision: HEAD
        path: '{{path}}'  # Путь к директории с манифестами
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{namespace}}'
      syncPolicy:
        automated: true  # Или false, если вы хотите ручную синхронизацию
        syncOptions:
          - Prune=true  # Удаляем ресурсы, которых нет в новом манифесте
          - DryRun=false  # Запрещаем сухую синхронизацию
          - Validate=true  # Проверка валидности манифестов
          - ApplyOutOfSyncOnly=false  # Синхронизация всех ресурсов
          - Force=false  # Не принуждаем принудительную синхронизацию
          - AllowEmpty=false  # Запрет на применение пустого манифеста
          - Replace=false  # Не используем замену ресурсов
          - SkipSchemaValidation=false  # Валидируем схему CRD
          - CreateNamespaceIfNotPresent=true  # Создать пространство имен, если оно отсутствует
          - SelfHeal=false  # Не восстанавливаем автоматически ресурсы
          - AutoPromote=false  # Отключаем автопродвижение версий
          - SyncStrategy=apply  # Используем стандартную стратегию apply
          - DestinationNamespace='{{namespace}}'  # Пространство имен назначения
          - SourceDirectory='{{path}}'  # Директория с манифестами
1. Prune
Описание: Опция Prune определяет, должны ли удаляться ресурсы, которые больше не указаны в последних версиях манифестов. По умолчанию она выключена (false), и Argo CD оставляет ресурсы, которые были удалены из манифестов, в целевом кластере.
Пример из жизни: Вы обновили версию своего приложения и убрали из манифеста старые ресурсы, такие как устаревшие ConfigMaps или Deployment. Если включить Prune: true, Argo CD удалит эти ресурсы из кластера, так как они больше не присутствуют в новых манифестах.

kubectl delete deployment old-deployment --namespace myapp
2. Dry Run
Описание: Включенная опция Dry Run запускает "сухую" синхронизацию, где Argo CD выводит предполагаемые изменения, но не применяет их фактически. Это полезно для проверки корректности ваших манифестов перед их применением.
Пример из жизни: Вы внесли значительные изменения в манифесты и хотите убедиться, что всё правильно настроено, прежде чем применить изменения в продакшене. Включив Dry Run: true, вы сможете посмотреть, какие ресурсы будут созданы, обновлены или удалены, не рискуя внести изменения сразу.

kubectl apply --dry-run -f manifests.yaml
3. Validate
Описание: Эта опция включает предварительную проверку валидности YAML/JSON манифестов перед их применением. Она проверяет синтаксические ошибки и соответствие схемам Kubernetes.
Пример из жизни: Перед развертыванием новой версии приложения вы добавили новый объект CustomResourceDefinition (CRD), но случайно допустили ошибку в файлах манифеста. С включенной опцией Validate: true Argo CD сообщит вам об ошибке и предотвратит неправильное применение манифестов.

kubectl create -f invalid_manifest.yaml
error: error validating "invalid_manifest.yaml": error validating data: found invalid field...
4. Apply Out Of Sync Only
Описание: Применяются только те ресурсы, которые уже имеют расхождения с текущими манифестами. Это означает, что ресурсы, которые соответствуют текущему состоянию в кластере, не будут затронуты.
Пример из жизни: В вашем приложении есть несколько Deployments, но только один из них нуждается в изменении. Если вы установите ApplyOutOfSyncOnly: true, Argo CD обновит только тот Deployment, который отличается от текущего состояния, оставляя остальные без изменений.

kubectl diff -f deployment.yaml
5. Force
Описание: Принудительно применяет изменения ко всем ресурсам, даже если они кажутся идентичными существующим объектам в кластере. Это полезно, когда вы уверены, что необходимо обновить все ресурсы независимо от их текущего состояния.
Пример из жизни: Вам нужно обновить все ресурсы вашего приложения, включая аннотации и метаданные, которые могут не отображаться как изменение в стандартных операциях. Включив Force: true, вы гарантируете полное обновление всех ресурсов.

kubectl replace -f deployment.yaml --force
6. Allow Empty
Описание: Позволяет применять пустые манифесты, когда ни одного ресурса не осталось в исходниках. Например, если вы удалили все ресурсы из папки с манифестами, и теперь там ничего нет.
Пример из жизни: Вы решили удалить приложение целиком, очистив все файлы манифестов. Если AllowEmpty: true, Argo CD позволит эту операцию, и все ресурсы, относящиеся к этому приложению, будут удалены из кластера.

rm -rf manifests/
kubectl apply -f manifests/ --allow-empty
7. Replace
Описание: Вместо обновления существующих ресурсов через патчи, данная опция принудительно заменяет ресурсы, создавая их заново. Это может быть полезно, если вам нужно гарантированное удаление старых конфигураций и создание новых.
Пример из жизни: Если ваше приложение изменилось настолько сильно, что лучше создать его с нуля, а не вносить изменения в существующие ресурсы, включение Replace: true заставит Argo CD удалить и воссоздать все ресурсы.

kubectl delete -f old_deployment.yaml && kubectl apply -f new_deployment.yaml
8. Skip Schema Validation
Описание: Пропускает валидацию схемы для CRD-ресурсов. Это удобно, если ваш CRD не имеет полной схемы или её определение временно отсутствует, но вы хотите применить манифесты.
Пример из жизни: Вы используете кастомный оператор Kubernetes, который создаёт ресурсы с помощью CustomResourceDefinitions (CRDs). Иногда схема для этих CRD может отсутствовать или быть неполной. Чтобы обойти проблему с отсутствием схемы, можно установить SkipSchemaValidation: true.

kubectl apply -f crd_with_no_schema.yaml --skip-schema-validation
9. Create Namespace If Not Present
Описание: Автоматически создает пространство имен (namespace), если оно ещё не существует в кластере.
Пример из жизни: Вы развёртываете новое приложение, и пространство имен для него пока не создано. С включённой опцией CreateNamespaceIfNotPresent: true, Argo CD сам создаст нужное пространство имен перед началом развёртывания ресурсов.

kubectl get ns my-new-app || kubectl create ns my-new-app
10. Self Heal
Описание: Активируется механизм автоматического восстановления ресурсов до состояния, указанного в манифестах. Если обнаруживается разница между фактическим состоянием ресурсов в кластере и состоянием, описанным в манифестах, Argo CD попытается вернуть ресурсы в правильное состояние.
Пример из жизни: После непредвиденного сбоя ваши Deployment-объекты были частично удалены или повреждены вручную. Если включена опция SelfHeal: true, Argo CD восстановит недостающие или поврежденные ресурсы согласно последним версиям манифестов.

kubectl rollout restart deployment/my-app
11. Auto Promote
Описание: Опция позволяет автоматически продвигать новую версию приложения на основании заданных условий, таких как успешность предыдущих деплоев или другие критерии.
Пример из жизни: Ваша команда разработала новый релиз, и вы хотите, чтобы он автоматически развернулся сначала в тестовом окружении, а потом в продакшене, если тесты пройдут успешно. Настройка AutoPromote: true позволит автоматизировать этот процесс.

if [ "$TEST_STATUS" == "SUCCESS" ]; then
  kubectl set image deployment/my-app app=my-app:v2 --record
fi
12. Sync Strategy
Описание: Определяет стратегию синхронизации ресурсов в кластере. Доступны три варианта:
apply: стандартные операции через API Kubernetes;
hook: использование веб-хуков для выполнения дополнительных действий после успешной синхронизации;
none: отключение автоматической синхронизации.
Пример из жизни: Если вам нужно отправлять уведомления в Slack или другой сервис после каждого успешного деплоя, вы можете выбрать SyncStrategy: hook и настроить соответствующий веб-хук.

curl -X POST -H "Content-Type: application/json" \
      -d '{"text": "Deployment successful"}' \
      https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
13. Automated
Описание: Включает автоматическую синхронизацию приложения всякий раз, когда Argo CD обнаруживает изменения в манифестах.
Пример из жизни: Вы работаете над непрерывной интеграцией и доставкой (CI/CD), и хотите, чтобы каждое изменение в коде немедленно отражалось в кластере. Включая Automated: true, вы обеспечиваете постоянное обновление приложения на основе последних коммитов в репозиторий.

git commit -m "New feature added" && git push origin main
14. Destination Namespace
Описание: Указывает конкретное пространство имен, в которое нужно применить манифесты. Можно использовать переменную или статичное значение.
Пример из жизни: В вашей инфраструктуре есть несколько пространств имен для различных сред (dev, staging, prod). Вы хотите развернуть одно и то же приложение в разные среды, используя DestinationNamespace для выбора нужного пространства имен.

kubectl apply -n dev -f manifests.yaml
kubectl apply -n prod -f manifests.yaml
15. Source Directory
Описание: Указывает конкретный каталог в репозитории, из которого брать манифесты для синхронизации.
Пример из жизни: У вас есть монолитный репозиторий с несколькими приложениями, и вы хотите развернуть только одну часть приложения, находящуюся в конкретной директории. Установив SourceDirectory, вы ограничиваете область применения манифестов только нужной частью репозитория.

cd /path/to/repository/app1
kubectl apply -f .

The most used 
1. Prune: true
Зачем нужен: Эта опция полезна, если вы иногда удаляете ресурсы из вашего Chart (например, удаляете старый Deployment или Service). С включённым Prune, Argo CD автоматически удалит ненужные ресурсы из кластера, предотвращая накопление мусора.
Ваш случай: Поскольку у вас периодически меняются манифесты и могут появляться новые компоненты (аннотации, labels, новые templates), эта опция поможет поддерживать чистоту в кластере.
2. SelfHeal: true
Зачем нужен: Если кто-то вмешается в работу приложения вручную (например, изменит что-то в Deployment), SelfHeal вернёт приложение в состояние, указанное в ваших манифестах. Это гарантирует, что любые ручные изменения будут отменены при следующей синхронизации.
Ваш случай: Так как вы хотите поддерживать контроль над изменениями исключительно через Chart и ApplicationSet, эта опция идеально подходит для защиты от несанкционированных изменений.
3. CreateNamespaceIfNotPresent: true
Зачем нужен: Это полезно, если вы создаёте или переносите приложение в новый кластер или пространство имен. Если пространство имен не существует, Argo CD создаст его автоматически, избавляя вас от необходимости делать это вручную.
Ваш случай: Если вы хотите, чтобы Argo CD создавал пространства имен самостоятельно, эта опция упростит управление вашим приложением.
4. Automated: true
Зачем нужен: Опция позволяет Argo CD автоматически синхронизировать изменения в манифестах, как только они появляются в репозитории. Это особенно полезно для CI/CD процессов, когда вы хотите, чтобы любое изменение в коде мгновенно отражалось в кластере.
Ваш случай: Учитывая, что вы часто вносите незначительные изменения, автоматическая синхронизация облегчит вашу работу, поскольку вам не придётся вручную инициировать деплой.
5. Force: false
Зачем нужен: Оставьте эту опцию выключенной (false), потому что принудительная синхронизация необходима только тогда, когда нужно гарантированно обновить все ресурсы, даже если они выглядят одинаковыми. Для небольших изменений это избыточная операция.
Ваш случай: Ваши изменения в основном касаются изображений и незначительных модификаций в манифестах, поэтому вам вряд ли понадобится принудительный апдейт.
6. ApplyOutOfSyncOnly: false
Зачем нужен: Эта опция позволяет синхронизировать только те ресурсы, которые отличаются от текущих. Однако, если у вас небольшие изменения, и вы хотите контролировать весь процесс синхронизации, лучше оставить её выключенной.
Ваш случай: Лучше оставлять возможность полного контроля над всеми ресурсами, так как изменения могут касаться различных аспектов приложения.

# About order create templates 
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ .Values.database.validatingwebhookconfiguration.name }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
## annotaion argocd.argoproj.io/sync-wave: "1" allow you create resource at the end, after deploy all other resources

