Варианты "поломок" для тренировки инженеров
1. Дрейн и анкордон ноды
Из пода запустить команды kubectl drain <node> --ignore-daemonsets --force и kubectl uncordon <node> (или наоборот).

Это приведёт к эвакуации подов с ноды и запрету/разрешению планирования на ней.

Инженерам надо будет понять, почему поды пересоздаются и почему нода не принимает новые поды.

2. Остановка системных сервисов на ноде
Из пода с привилегиями (hostPID, hostNetwork) остановить containerd или kubelet на одном из мастер-нод.

Это вызовет потерю связи с нодой, и Kubernetes начнёт эвакуировать поды.

Нужно будет исследовать логи, состояние ноды, понять причину.

3. Симуляция падения пода
Использовать kubectl delete pod или kill контейнера внутри пода.

Можно сделать это через Chaos Mesh (PodKill, PodFailure) для более контролируемых экспериментов.

Инженеры увидят, как Kubernetes восстанавливает поды и как реагируют деплойменты.

4. Нарушение сетевого подключения
Из пода заблокировать сетевой трафик (например, iptables DROP) к API-серверу или между нодами.

Это вызовет ошибки в коммуникации, падение контроллеров, проблемы с синхронизацией.

Задача — найти причину сетевых проблем.

5. Заполнение диска или памяти на ноде
Создать нагрузку, которая заполнит диск /var/lib/kubelet или исчерпает память.

Это приведёт к проблемам с запуском подов, ошибкам OOMKilled.

Нужно будет анализировать метрики, логи kubelet и подов.

6. Ошибки в конфигурации webhook
Создать валидирующий webhook с неправильным caBundle или endpoint, чтобы запросы на создание ресурсов блокировались.

Инженеры должны будут понять, почему операции не проходят и как исправить webhook.

7. Проблемы с etcd
Из пода (с доступом) вызвать смену лидера etcd или временно остановить etcd.

Это вызовет ошибки в API-сервере и задержки.

Задача — отследить влияние на кластер и восстановить etcd.

Как реализовать из пода?
Создать Docker image с kubectl, curl, iptables, bash и необходимыми утилитами.

Запускать под с hostPID: true, hostNetwork: true, privileged: true (с осторожностью!).

Скрипты внутри контейнера будут выполнять команды для создания проблем.

Можно интегрировать Chaos Mesh для более "чистых" и контролируемых сбоев.
